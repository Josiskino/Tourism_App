// Mocks generated by Mockito 5.4.4 from annotations
// in myapp/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:myapp/core/error/failure.dart' as _i7;
import 'package:myapp/core/params/params.dart' as _i9;
import 'package:myapp/features/auth/domain/entities/agency.dart' as _i13;
import 'package:myapp/features/auth/domain/entities/tourist.dart' as _i8;
import 'package:myapp/features/auth/domain/entities/user.dart' as _i15;
import 'package:myapp/features/auth/domain/repositories/agency_repository.dart'
    as _i3;
import 'package:myapp/features/auth/domain/repositories/tourist_repository.dart'
    as _i2;
import 'package:myapp/features/auth/domain/repositories/user_repository.dart'
    as _i4;
import 'package:myapp/features/auth/domain/usecases/login_usecase.dart' as _i14;
import 'package:myapp/features/auth/domain/usecases/register_agency_usecase.dart'
    as _i12;
import 'package:myapp/features/auth/domain/usecases/register_tourist_usecase.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTouristRepository_0 extends _i1.SmartFake
    implements _i2.TouristRepository {
  _FakeTouristRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAgencyRepository_1 extends _i1.SmartFake
    implements _i3.AgencyRepository {
  _FakeAgencyRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_2 extends _i1.SmartFake
    implements _i4.UserRepository {
  _FakeUserRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TouristRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTouristRepository extends _i1.Mock implements _i2.TouristRepository {
  MockTouristRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>> registerTourist(
          _i9.TemplateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerTourist,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>>.value(
            _i10.dummyValue<_i6.Either<_i7.Failure, _i8.Tourist>>(
          this,
          Invocation.method(
            #registerTourist,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i8.Tourist>>> getAllTourists() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTourists,
          [],
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, List<_i8.Tourist>>>.value(
                _i10.dummyValue<_i6.Either<_i7.Failure, List<_i8.Tourist>>>(
          this,
          Invocation.method(
            #getAllTourists,
            [],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, List<_i8.Tourist>>>);
}

/// A class which mocks [RegisterTouristUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterTouristUseCase extends _i1.Mock
    implements _i11.RegisterTouristUseCase {
  MockRegisterTouristUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TouristRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTouristRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TouristRepository);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>> call(
          _i9.TemplateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>>.value(
            _i10.dummyValue<_i6.Either<_i7.Failure, _i8.Tourist>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i8.Tourist>>);
}

/// A class which mocks [RegisterAgencyUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterAgencyUseCase extends _i1.Mock
    implements _i12.RegisterAgencyUseCase {
  MockRegisterAgencyUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AgencyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAgencyRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AgencyRepository);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i13.Agency>> call(
          _i9.TemplateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, _i13.Agency>>.value(
            _i10.dummyValue<_i6.Either<_i7.Failure, _i13.Agency>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i13.Agency>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i14.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.UserRepository);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i15.User>> call(
          _i9.TemplateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, _i15.User>>.value(
            _i10.dummyValue<_i6.Either<_i7.Failure, _i15.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i15.User>>);
}
